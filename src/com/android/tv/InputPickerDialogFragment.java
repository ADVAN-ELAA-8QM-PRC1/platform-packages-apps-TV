/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tv;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.Fragment;
import android.app.FragmentTransaction;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.os.Bundle;
import android.os.Handler;
import android.tv.TvInputInfo;
import android.tv.TvInputManager;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO: Insert description here. (generated by jaeseo)
 */
public class InputPickerDialogFragment extends DialogFragment {
    public static final String DIALOG_TAG = InputPickerDialogFragment.class.getName();

    public static final String ARG_MAIN_INPUT_ID = "main_input_id";
    public static final String ARG_SUB_INPUT_ID = "sub_input_id";

    private static final String TAG = "InputPickerDialogFragment";
    private static final String DIALOG_EDIT_INPUT = "edit_input";

    private final Map<String, TvInputInfo> mInputMap = new HashMap<String, TvInputInfo>();

    private String mSelectedInputId;
    private String mSelectedPipInputId;

    private ArrayAdapter<String> mAdapter;
    private InputPickerDialogListener mListener;

    private TvInputManager mTvInputManager;

    private final TvInputManager.TvInputListener mAvailabilityListener =
            new TvInputManager.TvInputListener() {
                @Override
                public void onAvailabilityChanged(ComponentName name, boolean isAvailable) {
                    mAdapter.notifyDataSetChanged();
                }
            };

    private final Handler mHandler = new Handler();

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        // Verify that the host activity implements the callback interface.
        try {
            // Instantiate the InputPickerDialogListener so we can send events to the host.
            mListener = (InputPickerDialogListener) activity;
        } catch (ClassCastException e) {
            // The activity doesn't implement the interface, throw exception.
            throw new ClassCastException(
                    activity.toString() + " must implement InputPickerDialogListener");
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        setupInputAdapter();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Bundle arg = getArguments();
        if (arg != null) {
            mSelectedInputId = arg.getString(ARG_MAIN_INPUT_ID);
            mSelectedPipInputId = arg.getString(ARG_SUB_INPUT_ID);
        }

        mAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1,
                new ArrayList<String>()) {
            @Override
            public boolean areAllItemsEnabled() {
                // Some inputs might not be available at the moment.
                return false;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                View view = super.getView(position, convertView, parent);
                view.setEnabled(isEnabled(position));
                return view;
            }

            @Override
            public boolean isEnabled(int position) {
                if (mTvInputManager != null) {
                    TvInputInfo inputInfo = mInputMap.get(mAdapter.getItem(position));
                    String inputId = inputInfo.getId();
                    if (inputId.equals(mSelectedInputId) || inputId.equals(mSelectedPipInputId)) {
                        return false;
                    }
                    // TODO: Create a cache that is updated from mAvailabilityListener and use the
                    // cached value instead of making an IPC call to get the status.
                    return mTvInputManager.getAvailability(inputInfo.getComponent());
                }
                return false;
            }
        };
        mTvInputManager = (TvInputManager) getActivity().getSystemService(Context.TV_INPUT_SERVICE);
    }

    private void setupInputAdapter() {
        List<TvInputInfo> inputs = mTvInputManager.getTvInputList();
        if (inputs.size() < 1) {
            ((AlertDialog) getDialog()).getButton(Dialog.BUTTON_NEUTRAL).setEnabled(false);
            return;
        }

        for (TvInputInfo input : inputs) {
            ComponentName inputName = input.getComponent();
            mTvInputManager.registerListener(inputName, mAvailabilityListener, mHandler);

            String inputId = input.getId();
            String name = TvInputUtils.getDisplayNameForInput(getActivity(), input);
            if (inputId.equals(mSelectedInputId)) {
                name += " " + getResources().getString(R.string.selected);
            } else if (inputId.equals(mSelectedPipInputId)) {
                name += " " + getResources().getString(R.string.selected_picture_in_picture);
            }
            mInputMap.put(name, input);
        }
        String[] inputStrings = mInputMap.keySet().toArray(new String[0]);
        Arrays.sort(inputStrings);
        mAdapter.addAll(inputStrings);
        mAdapter.notifyDataSetChanged();

        ((AlertDialog) getDialog()).getButton(Dialog.BUTTON_NEUTRAL).setEnabled(true);
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.select_input_device)
                .setAdapter(mAdapter, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        TvInputInfo name = mInputMap.get(mAdapter.getItem(which));
                        mListener.onInputPicked(name, mAdapter.getItem(which));
                    }
                })
                .setNeutralButton(R.string.edit_input_device_name,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dismiss();
                                FragmentTransaction ft = getFragmentManager().beginTransaction();
                                Fragment prev = getFragmentManager().findFragmentByTag(
                                        DIALOG_EDIT_INPUT);
                                if (prev != null) {
                                    ft.remove(prev);
                                }
                                ft.addToBackStack(null);
                                DialogFragment fragment = new EditInputDialogFragment();
                                fragment.show(ft, DIALOG_EDIT_INPUT);
                            }
                        })
                .setNegativeButton(android.R.string.cancel, null);

        AlertDialog dialog = builder.create();
        dialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                ((AlertDialog) dialog).getButton(Dialog.BUTTON_NEUTRAL)
                        .setEnabled(mAdapter.getCount() > 0);
            }
        });
        return dialog;
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause()");
        if (mTvInputManager == null) {
            return;
        }
        List<TvInputInfo> inputs = mTvInputManager.getTvInputList();
        if (inputs.size() < 1) {
            return;
        }
        for (TvInputInfo input : inputs) {
            mTvInputManager.unregisterListener(input.getComponent(), mAvailabilityListener);
        }
    }

    public interface InputPickerDialogListener {
        public void onInputPicked(TvInputInfo which, String displayName);
    }
}
