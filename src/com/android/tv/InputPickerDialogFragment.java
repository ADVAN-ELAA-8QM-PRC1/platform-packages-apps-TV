/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tv;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DialogFragment;
import android.app.Fragment;
import android.app.FragmentTransaction;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.database.Cursor;
import android.os.Bundle;
import android.os.Handler;
import android.provider.TvContract;
import android.tv.TvInputInfo;
import android.tv.TvInputManager;
import android.util.Log;
import android.widget.ArrayAdapter;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TODO: Insert description here. (generated by jaeseo)
 */
public class InputPickerDialogFragment extends DialogFragment {
    public static final String DIALOG_TAG = InputPickerDialogFragment.class.getName();

    private static final String TAG = "InputPickerDialogFragment";
    private static final String DIALOG_EDIT_INPUT = "edit_input";

    private static final int REQUEST_START_SETUP_ACTIIVTY = 0;

    private final Map<String, TvInputInfo> mInputMap = new HashMap<String, TvInputInfo>();
    private ArrayAdapter<String> mAdapter;
    private InputPickerDialogListener mListener;

    private TvInputManager mTvInputManager;
    private TvInputInfo mSelectedTvInputInfo;

    private final TvInputManager.TvInputListener mAvailabilityListener =
            new TvInputManager.TvInputListener() {
                @Override
                public void onAvailabilityChanged(ComponentName name, boolean isAvailable) {
                    mAdapter.notifyDataSetChanged();
                }
            };

    private final Handler mHandler = new Handler();

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);
        // Verify that the host activity implements the callback interface.
        try {
            // Instantiate the InputPickerDialogListener so we can send events to the host.
            mListener = (InputPickerDialogListener) activity;
        } catch (ClassCastException e) {
            // The activity doesn't implement the interface, throw exception.
            throw new ClassCastException(
                    activity.toString() + " must implement InputPickerDialogListener");
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        setupInputAdapter();
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        mAdapter = new ArrayAdapter<String>(getActivity(), android.R.layout.simple_list_item_1,
                new ArrayList<String>()) {
            @Override
            public boolean areAllItemsEnabled() {
                // Some inputs might not be available at the moment.
                return false;
            }

            @Override
            public boolean isEnabled(int position) {
                if (mTvInputManager != null) {
                    TvInputInfo inputInfo = mInputMap.get(mAdapter.getItem(position));
                    // TODO: Create a cache that is updated from mAvailabilityListener and use the
                    // cached value instead of making an IPC call to get the status.
                    return mTvInputManager.getAvailability(inputInfo.getComponent());
                }
                return false;
            }
        };
        mTvInputManager = (TvInputManager) getActivity().getSystemService(Context.TV_INPUT_SERVICE);
    }

    private void setupInputAdapter() {
        List<TvInputInfo> inputs = mTvInputManager.getTvInputList();
        if (inputs.size() < 1) {
            ((AlertDialog) getDialog()).getButton(Dialog.BUTTON_NEUTRAL).setEnabled(false);
            return;
        }

        SharedPreferences preferences = getActivity().getSharedPreferences(TvSettings.PREFS_FILE,
                Context.MODE_PRIVATE);
        PackageManager pm = getActivity().getPackageManager();
        for (TvInputInfo input : inputs) {
            ComponentName inputName = input.getComponent();
            mTvInputManager.registerListener(inputName, mAvailabilityListener, mHandler);
            String name = preferences.getString(TvSettings.PREF_DISPLAY_INPUT_NAME + input.getId(),
                    input.loadLabel(pm).toString());
            mInputMap.put(name, input);
        }
        mAdapter.addAll(mInputMap.keySet().toArray(new String[0]));
        mAdapter.notifyDataSetChanged();

        ((AlertDialog) getDialog()).getButton(Dialog.BUTTON_NEUTRAL).setEnabled(true);
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        builder.setTitle(R.string.select_input_device)
                .setAdapter(mAdapter, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        TvInputInfo name = mInputMap.get(mAdapter.getItem(which));
                        if (!hasChannel(name)) {
                            showSetupActivity(name, mAdapter.getItem(which));
                            return;
                        }
                        mListener.onInputPicked(name);
                    }
                })
                .setNeutralButton(R.string.edit_input_device_name,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                dismiss();
                                FragmentTransaction ft = getFragmentManager().beginTransaction();
                                Fragment prev = getFragmentManager().findFragmentByTag(
                                        DIALOG_EDIT_INPUT);
                                if (prev != null) {
                                    ft.remove(prev);
                                }
                                ft.addToBackStack(null);
                                DialogFragment fragment = new EditInputDialogFragment();
                                fragment.show(ft, DIALOG_EDIT_INPUT);
                            }
                        })
                .setNegativeButton(android.R.string.cancel, null);

        AlertDialog dialog = builder.create();
        dialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialog) {
                ((AlertDialog) dialog).getButton(Dialog.BUTTON_NEUTRAL)
                        .setEnabled(mAdapter.getCount() > 0);
            }
        });
        return dialog;
    }

    @Override
    public void onPause() {
        super.onPause();
        Log.d(TAG, "onPause()");
        if (mTvInputManager == null) {
            return;
        }
        List<TvInputInfo> inputs = mTvInputManager.getTvInputList();
        if (inputs.size() < 1) {
            return;
        }
        for (TvInputInfo input : inputs) {
            mTvInputManager.unregisterListener(input.getComponent(), mAvailabilityListener);
        }
    }

    public interface InputPickerDialogListener {
        public void onInputPicked(TvInputInfo which);
    }

    private boolean hasChannel(TvInputInfo name) {
        String[] projection = {
                TvContract.Channels._ID
        };
        String selection = TvContract.Channels.PACKAGE_NAME + " = ? AND " +
                TvContract.Channels.SERVICE_NAME + " = ?";
        String[] selectionArgs = {
                name.getPackageName(), name.getServiceName()
        };
        Cursor cursor = getActivity().getContentResolver().query(TvContract.Channels.CONTENT_URI,
                projection, selection, selectionArgs, null);
        boolean hasChannel = cursor != null && cursor.getCount() > 0;
        if (cursor != null) {
            cursor.close();
        }
        return hasChannel;
    }

    private void showSetupActivity(TvInputInfo inputInfo, String displayName) {
        PackageManager pm = getActivity().getPackageManager();
        List<ResolveInfo> activityInfos = pm.queryIntentActivities(
                new Intent(TvInputUtils.ACTION_SETUP), PackageManager.GET_ACTIVITIES);
        ResolveInfo setupActivity = null;
        if (activityInfos != null) {
            for (ResolveInfo info : activityInfos) {
                if (info.activityInfo.packageName.equals(inputInfo.getPackageName())) {
                    setupActivity = info;
                }
            }
        }

        if (setupActivity == null) {
            String message = String.format(getString(R.string.input_setup_activity_not_found),
                    displayName);
            new AlertDialog.Builder(getActivity())
                    .setMessage(message)
                    .setPositiveButton(R.string.OK, null)
                    .show();
            return;
        }

        Intent intent = new Intent(TvInputUtils.ACTION_SETUP);
        intent.setClassName(setupActivity.activityInfo.packageName,
                setupActivity.activityInfo.name);
        startActivityForResult(intent, REQUEST_START_SETUP_ACTIIVTY);
        return;
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case REQUEST_START_SETUP_ACTIIVTY:
                if (resultCode == Activity.RESULT_OK) {
                    mListener.onInputPicked(mSelectedTvInputInfo);
                }
                break;
        }
    }
}
